@model PDFTOXLS.Models.SlaPolicy

@{
   
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-sm-12 col-md-12 col-xs-12">
        <div class="col-xs-12 clearfix">
            <div class="paddingboth topbtmpadding clearfix">
                 @using (Ajax.BeginForm("SaveSlaPolicy", "SlaPolicy", new AjaxOptions { HttpMethod = "POST", OnBegin = "", OnSuccess = "javascript:OnlyLoadPage('/SlaPolicy/SlaPolicyList')" }, new { enctype = "multipart/form-data" }))
                {
                @Html.ValidationSummary(true)
                     @Html.HiddenFor(m => m.ID, new { @Value = @ViewBag.ID })
                      @Html.ValidationMessageFor(m => m.ID)
                <fieldset>
                    @if (ViewBag.mode == "New")
                    {
                <h2 class="font-md">New SLA Policy</h2>
                }
                else if (ViewBag.mode == "Edit")
                {
                     <h2 class="font-md">Edit SLA Policy</h2>
                }
                     <div class="row">
                            <div class="col-xs-12 col-sm-6 col-md-6">
                                <div class="form-group">
                                    <label>Name <span class="required">*</span>:</label>
                                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control input-sm" })
                                    @Html.ValidationMessageFor(model => model.Name)
                                    
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-xs-12 col-sm-6 col-md-6">
                                <div class="form-group">
                                    <label>Description <span class="required">*</span>:</label>

                                    @Html.TextAreaFor(m => m.PolicyDescription, new { rows = 2, @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PolicyDescription)

                                </div>
                            </div>

                            <div class="col-xs-12 col-sm-6 col-md-6">
                                <div class="form-group">
                                   
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-xs-12 col-sm-6 col-md-6">
                                <div class="form-group">
                                    <h2 class="font-md">SLA Targets</h2>
                                    <label>Set Service Level Targets for each Ticket priority <span class="required"></span>:</label>

                                </div>
                            </div>

                        </div>


                        <div class="row">
                            <div class="col-xs-12 col-sm-6 col-md-6">
                                <div class="form-group">
                                    <h4 class="font-md">Important :</h4>
                                    <label>Response and resolution time should be within 15 min to 12 moths</label>

                                </div>
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12">

                                <table class="" style="width: 100%">
                                    <tr>
                                         <td><h2 class="font-md">Priority </h2></td>
                                         <td ><h2 class="font-md">Respond within </h2></td>
                                        <td><h2 class="font-md">Resolve within </h2></td> 
                                        <td><h2 class="font-md">Escalation Email </h2></td> 
                                    </tr>

                                    <tr>

                                        <td>Low </td>

                                        <td >
                                            
                                            @Html.TextBoxFor(m => m.LRespond,  new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);" ,style = "width: 40px; float:left;" })
                                              @Html.ValidationMessageFor(model => model.LRespond)
                                            @Html.DropDownList("LRespondTime", (IEnumerable<SelectListItem>)ViewBag.RespondTime, new { @class = "form-control input-sm", style = "width: 90px;float:left;" })
                                              @Html.ValidationMessageFor(model => model.LRespondTime)

                                        </td>


                                        <td >
                                            @Html.TextBoxFor(m => m.LResolve, new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);",  style = "width: 40px;float:left;" })
                                             @Html.ValidationMessageFor(model => model.LResolve)
                                             @Html.DropDownList("LResolveTime", (IEnumerable<SelectListItem>)ViewBag.ResolveTime, new { @class = "form-control input-sm", style = "width: 90px;float:left;" })</td>
                                          @Html.ValidationMessageFor(model => model.LResolveTime)
                                        <td >
                                            @Html.CheckBoxFor(model => model.LEscalationEmail, new { @checked = "checked"})
                                            @Html.ValidationMessageFor(model => model.LEscalationEmail)
                                        </td>
                                    </tr>
                                    <tr>

                                        <td>Normal </td>
                                      
                                        <td >
                                            @Html.TextBoxFor(m => m.NRespond, new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);",  style = "width: 40px; float:left;" })
                                        @Html.ValidationMessageFor(model => model.NRespond)
                                             @Html.DropDownList("NRespondTime", (IEnumerable<SelectListItem>)ViewBag.RespondTime, new { @class = "form-control input-sm", style = "width: 90px;" })</td>

                                         @Html.ValidationMessageFor(model => model.NRespondTime)
                                        <td >
                                            @Html.TextBoxFor(m => m.NResolve, new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);" , style = "width: 40px; float:left;" })
                                          @Html.ValidationMessageFor(model => model.NResolve)
                                             @Html.DropDownList("NResolveTime", (IEnumerable<SelectListItem>)ViewBag.ResolveTime, new { @class = "form-control input-sm", style = "width: 90px;" })</td>
                                           @Html.ValidationMessageFor(model => model.NResolveTime)


                                        <td >
                                            @Html.CheckBoxFor(model => model.NEscalationEmail, new { @checked = "checked" })
                                            @Html.ValidationMessageFor(model => model.NEscalationEmail)
                                        </td>
                                    </tr>
                                    <tr>

                                        <td>High </td>
                                     
                                        <td >
                                            @Html.TextBoxFor(m => m.HRespond, new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);",  style = "width: 40px; float:left;" })
                                        @Html.ValidationMessageFor(model => model.HRespond)
                                             @Html.DropDownList("HRespondTime", (IEnumerable<SelectListItem>)ViewBag.RespondTime, new { @class = "form-control input-sm", style = "width: 90px;" })</td>

                                         @Html.ValidationMessageFor(model => model.HRespondTime)
                                        <td>
                                            @Html.TextBoxFor(m => m.HResolve, new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);",  style = "width: 40px; float:left;" })
                                             @Html.ValidationMessageFor(model => model.HResolve)
                                             @Html.DropDownList("HResolveTime", (IEnumerable<SelectListItem>)ViewBag.ResolveTime, new { @class = "form-control input-sm", style = "width: 90px;" })</td>
                                           @Html.ValidationMessageFor(model => model.HResolveTime)

                                        <td>
                                            @Html.CheckBoxFor(model => model.HEscalationEmail, new { @checked = "checked" })
                                            @Html.ValidationMessageFor(model => model.HEscalationEmail)
                                        </td>
                                    </tr>
                                    <tr>

                                        <td>Urgent </td>
                                       
                                        <td>
                                            @Html.TextBoxFor(m => m.URespond, new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);",  style = "width: 40px; float:left;" })
                                            @Html.ValidationMessageFor(model => model.URespond)
                                             @Html.DropDownList("URespondTime", (IEnumerable<SelectListItem>)ViewBag.RespondTime, new { @class = "form-control input-sm", style = "width: 90px;" })</td>
                                         @Html.ValidationMessageFor(model => model.URespondTime)

                                        <td>
                                            @Html.TextBoxFor(m => m.UResolve, new { @class = "form-control input-sm",@onkeypress = "return isNumberKey(event);",  style = "width: 40px; float:left;" })
                                              @Html.ValidationMessageFor(model => model.UResolve)
                                            @Html.DropDownList("UResolveTime", (IEnumerable<SelectListItem>)ViewBag.ResolveTime, new { @class = "form-control input-sm", style = "width: 90px;" })</td>
                                          @Html.ValidationMessageFor(model => model.UResolveTime)
                                        <td>
                                            @Html.CheckBoxFor(model => model.UEscalationEmail, new { @checked = "checked" })
                                            @Html.ValidationMessageFor(model => model.UEscalationEmail)
                                        </td>
                                    </tr>
                                </table>

                            </div>

                        </div>

                 
                    <input type="submit" class="btn btn-xs btn-primary" name="btnSubmit" value="Update" />
                    <a class="btn btn-xs btn-default" href="@Url.Action("SlaPolicyList", "SlaPolicy")">Cancel</a>
                </fieldset>
            }
            </div>
        </div>
    </div>
</div>
<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.js")" type="text/javascript"></script>
 <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script type="text/javascript">
function isNumberKey(evt)
{
          var charCode = (evt.which) ? evt.which : event.keyCode;
          if (charCode != 46 && charCode > 31 
            && (charCode < 48 || charCode > 57))
             return false;

          return true;
}
</script>

